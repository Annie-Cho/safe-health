# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MainCategory {
  id: String!
  name: String!
}

type SubCategory {
  id: String!
  name: String!
  mainCategory: MainCategory!
}

type FoodImage {
  id: String!
  url: String!
  isMain: Boolean!
  food: Food!
}

type Coupon {
  id: String!
  desc: String
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Payment {
  id: String!
  price: Int
  status: PAYMENT_STATUS_ENUM!
  impUid: String!
  createdAt: DateTime!
  coupon: Coupon!
}

enum PAYMENT_STATUS_ENUM {
  PAID
  CANCELED
}

type Grade {
  id: String!
  name: String
}

type User {
  id: String!
  email: String
  name: String
  password: String
  address: String
  addressDetail: String
  point: Int
  seller: Boolean!
  admin: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  grade: Grade
}

type Order {
  id: String!
  address: String
  addressDetail: String
  status: String!
  createdAt: DateTime
  user: User!
  payment: Payment!
  foods: [Food!]!
}

type Food {
  id: String
  name: String
  brandName: String
  price: Int
  description: String
  stock: Int
  score: Float
  subCategory: SubCategory!
  foodImages: [FoodImage!]!
  orders: [Order!]!
}

type Nutri {
  id: String!
  name: String!
}

type CommentAnswer {
  id: String!
  contents: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
}

type Comment {
  id: String!
  contents: String
  score: Float
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  user: User!
  food: Food!
  commentAnswer: CommentAnswer!
  images: [CommentImages!]!
}

type CommentImages {
  id: String!
  url: String
  isMain: Boolean
  comment: Comment!
}

type Query {
  fetchFoods(search: String): [Food!]!
  fetchFoodsWithDeleted: [Food!]!
  fetchFood(foodId: String!): Food!
  fetchNewFoods: [Food!]!
  fetchNutries: [Nutri!]!
  fetchMainCategories: [MainCategory!]!
  fetchMainCategoriesWithDeleted: [MainCategory!]!
  fetchPayments: [Payment!]!
  fetchPayment(paymentId: String!): Payment!
  fetchPaymentByUser: [Payment!]!
  fetchSubCategories: [SubCategory!]!
  fetchUsers: [User!]!
  fetchUsersWithDeleted: [User!]!
  fetchUser(email: String!): User!
  fetchLoginUser: User!
}

type Mutation {
  login(email: String!, pwd: String!): String!
  logout: String!
  restoreAccessToken: String!
  uploadFiles(files: [Upload!]!): [String!]!
  createFood(createFoodInput: CreateFoodInput!): Food!
  updateFood(foodId: String!, updateFoodInput: UpdateFoodInput!): Food!
  deleteFood(foodId: String!): Boolean!
  restoreFood(foodId: String!): Boolean!
  createNutri(nutriName: String!): Nutri!
  createMainCategory(createMainCategoryInput: CreateMainCategoryInput!): MainCategory!
  updateMainCategory(mainCategoryId: String!, updateMainCategoryInput: UpdateMainCategoryInput!): MainCategory!
  deleteMainCategory(mainCategoryId: String!): Boolean!
  restoreMainCategory(mainCategoryId: String!): Boolean!
  createPayment(createPaymentInput: CreatePaymentInput!): Payment!
  cancelPayment(impUid: String!, reason: String!): Payment!
  updateOrderStatus(paymentId: String!, orderStatus: String!): Payment!
  createSubCategory(createSubCategory: CreateSubCategory!): SubCategory!
  updateSubCategory(subCategoryId: String!, updateSubCategory: UpdateSubCategory!): SubCategory!
  deleteSubCategory(subCategoryId: String!): Boolean!
  restoreSubCategory(subCategoryId: String!): Boolean!
  sendTokenToPhone(phoneNumber: String!): Boolean!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  updateUserPwd(pwd: String!): User!
  deleteUser(email: String!): Boolean!
  deleteLoginUser: Boolean!
  restoreUser(email: String!): Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateFoodInput {
  name: String!
  price: Int!
  description: String!
  kcal: Int!
  subCategoryId: String!
  images: [ImageInput!]!
}

input ImageInput {
  url: String!
}

input UpdateFoodInput {
  name: String
  price: Int
  description: String
  kcal: Int
  subCategoryId: String
  images: [ImageInput!]
}

input CreateMainCategoryInput {
  name: String!
}

input UpdateMainCategoryInput {
  name: String
}

input CreatePaymentInput {
  impUid: String!
  amount: Int!
  foodIds: [String!]!
}

input CreateSubCategory {
  name: String!
  mainCategoryId: String!
}

input UpdateSubCategory {
  name: String
  mainCategoryId: String
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  address: String!
  addressDetail: String!
  seller: Boolean!
}

input UpdateUserInput {
  name: String
  address: String
  addressDetail: String
}